import { app, BrowserWindow, ipcMain } from 'electron';
import * as pty from 'node-pty';
import * as os from 'os';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

// Store PTY instances for multiple terminals
const ptyProcesses = new Map<string, pty.IPty>();

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// Setup IPC handlers for terminal - must be before window creation
const setupTerminalHandlers = () => {
  // Determine shell based on OS
  const shell = process.platform === 'win32' ? 'powershell.exe' : process.env.SHELL || '/bin/bash';

  // Create terminal process
  ipcMain.handle('terminal:create', (_, terminalId: string) => {
    // Clean up existing process if it exists
    if (ptyProcesses.has(terminalId)) {
      ptyProcesses.get(terminalId)?.kill();
      ptyProcesses.delete(terminalId);
    }

    const ptyProcess = pty.spawn(shell, [], {
      name: 'xterm-color',
      cols: 80,
      rows: 24,
      cwd: process.env.HOME || process.cwd(),
      env: process.env as { [key: string]: string },
    });

    ptyProcesses.set(terminalId, ptyProcess);

    // Send data from PTY to renderer
    ptyProcess.onData((data: string) => {
      BrowserWindow.getAllWindows()[0]?.webContents.send(`terminal:data:${terminalId}`, data);
    });

    // Handle process exit
    ptyProcess.onExit(({ exitCode }) => {
      BrowserWindow.getAllWindows()[0]?.webContents.send(`terminal:exit:${terminalId}`, exitCode);
      ptyProcesses.delete(terminalId);
    });

    return { success: true };
  });

  // Handle input from renderer
  ipcMain.on('terminal:input', (_, terminalId: string, data: string) => {
    const ptyProcess = ptyProcesses.get(terminalId);
    if (ptyProcess) {
      ptyProcess.write(data);
    }
  });

  // Handle resize
  ipcMain.on('terminal:resize', (_, terminalId: string, cols: number, rows: number) => {
    const ptyProcess = ptyProcesses.get(terminalId);
    if (ptyProcess) {
      ptyProcess.resize(cols, rows);
    }
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  setupTerminalHandlers();
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
